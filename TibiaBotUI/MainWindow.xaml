<controls:MetroWindow x:Class="MediviaBotUI.MainWindow"
        xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:viewModels="clr-namespace:MediviaBotUI.ViewModels"
        xmlns:attachedBehaviors="clr-namespace:MediviaBotUI.AttachedBehaviors"
        xmlns:models="clr-namespace:MediviaBotUI.Models"
        mc:Ignorable="d"
        Title="{Binding WindowTitle}" Height="600" Width="748" ShowTitleBar="True">
    <Window.DataContext>
        <viewModels:MainWindowViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <viewModels:TargetingViewModel x:Key="TargetingViewModel"/>
        <viewModels:CavebotViewModel x:Key="CavebotViewModel"/>
        <viewModels:AppConfigurationViewModel x:Key="AppConfigurationViewModel"/>
        <viewModels:HealerViewModel x:Key="HealerViewModel"/>
    </Window.Resources>
    <!--Flyouts-->
    <controls:MetroWindow.Flyouts >
        <controls:FlyoutsControl >
            <controls:Flyout Theme="Adapt" Header="Main Menu" IsOpen="{Binding IsChecked, ElementName=MainManuToggle}">
                <StackPanel>
                    <Button Content="Healer" Command="{Binding SwitchPage}" CommandParameter="0" Style="{DynamicResource MainMenuButtons}"/>
                    <Button Content="Cavebot" Command="{Binding SwitchPage}" CommandParameter="1"  Style="{DynamicResource MainMenuButtons}"/>
                    <Button Content="Targeting" Command="{Binding SwitchPage}" CommandParameter="2"  Style="{DynamicResource MainMenuButtons}"/>
                    <Button Content="Looting" Command="{Binding SwitchPage}" CommandParameter="3"  Style="{DynamicResource MainMenuButtons}"/>
                    <Button Content="Peristent" Command="{Binding SwitchPage}" CommandParameter="4"  Style="{DynamicResource MainMenuButtons}"/>
                    <Button Content="Hotkey" Command="{Binding SwitchPage}" CommandParameter="5"  Style="{DynamicResource MainMenuButtons}"/>
                    <Button Content="Application Settings" Command="{Binding SwitchPage}" CommandParameter="6" Style="{StaticResource MainMenuButtons}"/>
                </StackPanel>
            </controls:Flyout>
            <!--Cavebot Flyout-->
            <controls:Flyout DataContext="{StaticResource CavebotViewModel}" Position="Right" Header="Edit Cavebot" MinWidth="150">
                <controls:Flyout.IsOpen>
                    <MultiBinding Converter="{StaticResource FlyoutMultiBindingConveter}" ConverterParameter="1">
                        <Binding ElementName="MainTabControl" Path="SelectedIndex" Mode="OneWay"/>
                        <Binding ElementName="EditWaypointsToggleButton" Path="IsChecked"/>
                    </MultiBinding>
                </controls:Flyout.IsOpen>
                <Grid Margin="10,5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="100"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Margin="0,2,5,2" Text="Type" Grid.Column="0" Grid.Row="2"/>
                    <ComboBox ItemsSource="{ Binding Source={StaticResource WaypointTypes}}" SelectedItem="{Binding WaypointType}" Margin="5,2,5,2"  Grid.Column="1" Grid.Row="2" />
                    <TextBlock Margin="0,2,5,2"  Text="Range" Grid.Row="3" Grid.Column="0"/>
                    <StackPanel  Grid.Row="3" Grid.Column="1" Orientation="Horizontal" Margin="5">
                        <controls:NumericUpDown Value="{Binding XWaypointRange}" Minimum="1" Maximum="5"/>
                        <controls:NumericUpDown  Value="{Binding YWaypointRange}" Minimum="1" Maximum="5"/>
                    </StackPanel>
                    <StackPanel Grid.Row="4" Margin="0,30,0,0" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Center" Orientation="Horizontal">
                        <Button Style="{StaticResource RoundButtons}" ToolTip="Add"  Content="ü" Command="{Binding AddWaypoint}" CommandParameter="{Binding ElementName=WaypointDataGrid, Path=SelectedItem}"/>
                        <Button Style="{StaticResource RoundButtons}" ToolTip="Delete" Content="û" Command="{Binding DeleteWaypoint}" CommandParameter="{Binding ElementName=WaypointDataGrid, Path=SelectedItem}"/>
                    </StackPanel>
                    <TextBlock Text="Additional Configurations" Margin="0,30,0,0" Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2"/>
                    <TextBlock Text="Walk On Fire" Grid.Row="6" Grid.Column="0"/>
                    <controls:NumericUpDown Style="{StaticResource ThresholdNumericUpDown}" Grid.Row="6" Grid.Column="1" Value="{Binding WalkOnFireThreshold}"/>
                    <TextBlock  Text="Walk On Energy" Grid.Row="7" Grid.Column="0"/>
                    <controls:NumericUpDown Style="{StaticResource ThresholdNumericUpDown}" Grid.Row="7" Grid.Column="1" Value="{Binding WalkOnEnergyThreshold}"/>
                    <TextBlock  Text="Walk On Poison" Grid.Row="8" Grid.Column="0"/>
                    <controls:NumericUpDown Style="{StaticResource ThresholdNumericUpDown}" Grid.Row="8" Grid.Column="1" Value="{Binding WalkOnPoisonThreshold}"/>
                    <TextBlock Text="Walkable Ids" Grid.Row="9" Grid.Column="0"/>
                    <!--needs a convertor before making it two way string > int[]-->
                    <TextBox Text="{Binding WalkableIds, Mode=OneWay}" Grid.Row="9" Grid.Column="1" Margin="10,5" />
                    <WrapPanel Margin="0,30,0,30" Width="120"  UseLayoutRounding="True" HorizontalAlignment="Center" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" >
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.NorthWest }}"  Margin="0,0,5,2" Content="ë" GroupName="WaypointDirectionGroup" FlowDirection="RightToLeft" />
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.North }}"   Margin="0,0,0,2" GroupName="WaypointDirectionGroup"/>
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.NorthEast }}"  Margin="0,0,0,2" GroupName="WaypointDirectionGroup" Content="ì" />
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.West }}"   Margin="-3,0,5,0"   GroupName="WaypointDirectionGroup" Content="ç" FlowDirection="RightToLeft"/>
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.Center }}"   Margin="0,0,0,2"  GroupName="WaypointDirectionGroup"  />
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.East }}"  Margin="0,0,0,2" GroupName="WaypointDirectionGroup" Content="è"/>
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.SouthWest }}"    Margin="0,0,5,2"  GroupName="WaypointDirectionGroup" Content="í" FlowDirection="RightToLeft"/>
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.South }}"   Margin="0,0,0,2" GroupName="WaypointDirectionGroup"/>
                        <RadioButton IsChecked="{Binding  WaypointDirection, Converter={StaticResource RadioButtonToEnumConverter}, ConverterParameter={x:Static models:WaypointDirection.SouthEast }}"   Margin="0,0,0,2" GroupName="WaypointDirectionGroup" Content="î"/>
                    </WrapPanel>
                </Grid>
            </controls:Flyout>
            <controls:Flyout DataContext="{StaticResource CavebotViewModel}" Position="Right" Header="Edit Action" MinWidth="420">
                <controls:Flyout.IsOpen>
                    <MultiBinding Converter="{StaticResource FlyoutMultiBindingConveter}" ConverterParameter="1">
                        <Binding ElementName="MainTabControl" Path="SelectedIndex" Mode="OneWay"/>
                        <Binding Path="EditingAction" />
                    </MultiBinding>
                </controls:Flyout.IsOpen>
                <Grid>
                    <avalonEdit:TextEditor ShowLineNumbers="True" Foreground="{DynamicResource FlyoutForegroundBrush}" Margin="10" SyntaxHighlighting="{Binding HighlightingDefinition, Source={StaticResource AppConfigurationViewModel}}" Name="ActionEditor" FontFamily="Consolas" FontSize="10pt" WordWrap="False" >
                        <i:Interaction.Behaviors>
                            <attachedBehaviors:AvalonEditBehaviour GiveMeTheText="{Binding ElementName=WaypointDataGrid, Path=SelectedItem.Action, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </i:Interaction.Behaviors>
                    </avalonEdit:TextEditor>
                </Grid>
            </controls:Flyout>
            <!--Healer Flyout-->
            <controls:Flyout MinWidth="150" DataContext="{StaticResource HealerViewModel}"  Header="Edit Healer" Position="Right">
                <controls:Flyout.IsOpen>
                    <MultiBinding Converter="{StaticResource FlyoutMultiBindingConveter}" ConverterParameter="0">
                        <Binding ElementName="MainTabControl" Path="SelectedIndex"/>
                        <Binding ElementName="EditHealerToggleButton" Path="IsChecked"/>
                    </MultiBinding>
                </controls:Flyout.IsOpen>
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="100"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Name"/>
                    <TextBox Margin="5" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="0" MaxLength="30" Text="{Binding CurrentHealerRule.Name}"/>
                    <TextBlock Grid.Column="0" Grid.Row="1" Text="{Binding SelectedItem.Header, ElementName=HealerRulesTabControl}"/>
                    <ComboBox Visibility="{Binding ElementName=HealerRulesTabControl, Path=SelectedIndex, Converter={StaticResource VisibilityConverter}, ConverterParameter=0}" Margin="5" Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2"
                              SelectedItem="{Binding CurrentHealerRule.Spell}" DisplayMemberPath="Name" ItemsSource="{Binding Spells}"/>
                    <ComboBox Visibility="{Binding ElementName=HealerRulesTabControl, Path=SelectedIndex, Converter={StaticResource VisibilityConverter}, ConverterParameter=1}" Margin="5" Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2"
                              SelectedItem="{Binding CurrentHealerRule.HealItem}" DisplayMemberPath="Name" ItemsSource="{Binding HealItems}"/>
                    <TextBlock Grid.Column="0" Grid.Row="2" Text="Condition"/>
                    <TextBlock Grid.Column="0" Grid.Row="3" Text="Range"/>
                    <ComboBox Margin="5" Grid.Column="1" Grid.Row="2"  Grid.ColumnSpan="2" SelectedItem="{Binding CurrentHealerRule.Condition, Converter={StaticResource EnumToStringConverter}}" ItemsSource="{Binding Source={StaticResource HealerConditions}, Converter={StaticResource EnumToStringConverter}}"/>
                    <StackPanel Orientation="Horizontal" Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2" Margin="5,0">
                        <controls:NumericUpDown Value="{Binding CurrentHealerRule.MinTrigger}" Maximum="{Binding CurrentHealerRule.TriggerLimit}" Style="{StaticResource HealthConditionRangeNumericUpDown}"/>
                        <TextBlock Text="to"/>
                        <controls:NumericUpDown Value="{Binding CurrentHealerRule.MaxTrigger}" Maximum="{Binding CurrentHealerRule.TriggerLimit}" Style="{StaticResource HealthConditionRangeNumericUpDown}"/>
                    </StackPanel>
                    <TextBlock Grid.Column="0" Grid.Row="4" Text="Priority"/>
                    <Slider  Style="{StaticResource PrioritySlider}"  Maximum="{Binding SpellHealerRules.Count, Mode=OneWay, Converter={StaticResource HealerPriorityConverter}}" Visibility="{Binding ElementName=HealerRulesTabControl, Path=SelectedIndex, Converter={StaticResource VisibilityConverter}, ConverterParameter=0}" Value="{Binding CurrentHealerRule.Priority,UpdateSourceTrigger=PropertyChanged}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="ValueChanged">
                                <i:InvokeCommandAction Command="{Binding ChangePriority}" CommandParameter="{Binding ElementName=HealerSpellRulesDatagrid, Path=SelectedItem}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Slider>
                    <Slider Style="{StaticResource PrioritySlider}" Maximum="{Binding ItemHealerRules.Count, Mode=OneWay,Converter={StaticResource HealerPriorityConverter}}" Visibility="{Binding ElementName=HealerRulesTabControl, Path=SelectedIndex, Converter={StaticResource VisibilityConverter}, ConverterParameter=1}" Value="{Binding CurrentHealerRule.Priority,UpdateSourceTrigger=PropertyChanged}" >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="ValueChanged">
                                <i:InvokeCommandAction Command="{Binding ChangePriority}" CommandParameter="{Binding ElementName=HealerHealItemRulesDatagrid, Path=SelectedItem}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Slider>
                    <TextBlock Text="Spam Rate" Grid.Column="0" Grid.Row="5"/>
                    <controls:NumericUpDown Name="HealerSpamRateMin" Minimum="100" Value="{Binding CurrentHealerRule.MinSpamRate}" Style="{StaticResource SpamRateNumericUpDown}" Grid.Column="1" Grid.Row="5" />
                    <controls:NumericUpDown Minimum="{Binding ElementName=HealerSpamRateMin, Path=Value}" Value="{Binding CurrentHealerRule.MaxSpamRate}" Style="{StaticResource SpamRateNumericUpDown}" Grid.Column="2" Grid.Row="5" />
                    <CheckBox IsChecked="{Binding CurrentHealerRule.Enabled}" Margin="0,30,0,0" Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="2" Content="Enabled"/>
                    <CheckBox IsChecked="{Binding CurrentHealerRule.OverrideActions}" Grid.Column="0" Grid.Row="7" Grid.ColumnSpan="2" Content="Do not override actions" ToolTip="If checked this tule will not override other actions."/>
                    <CheckBox IsChecked="{Binding CurrentHealerRule.SaveMana}" Visibility="{Binding ElementName=HealerRulesTabControl, Path=SelectedIndex, Converter={StaticResource VisibilityConverter}, ConverterParameter=0}"  Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="3" Content="Save mana for this spell" ToolTip="If checked the healer will not use spells if the result mana is lower than the needed to cast this spell."/>
                    <StackPanel Grid.Row="9" Margin="0,30,0,0" Grid.Column="0" Grid.ColumnSpan="3" HorizontalAlignment="Center" Orientation="Horizontal">
                        <Button Style="{StaticResource RoundButtons}" ToolTip="{Binding AddButtonTooltip}"  Content="{Binding AddButtonText}" Command="{Binding AddRule}" CommandParameter="{Binding SelectedItem.Header, ElementName=HealerRulesTabControl}"/>
                        <Button  Visibility="{Binding ElementName=HealerRulesTabControl, Path=SelectedIndex, Converter={StaticResource VisibilityConverter}, ConverterParameter=0}" Style="{StaticResource RoundButtons}" ToolTip="Delete" Content="û" Command="{Binding DeleteRule}" CommandParameter="{Binding ElementName=HealerSpellRulesDatagrid, Path=SelectedItem}"/>
                        <Button  Visibility="{Binding ElementName=HealerRulesTabControl, Path=SelectedIndex, Converter={StaticResource VisibilityConverter}, ConverterParameter=1}" Style="{StaticResource RoundButtons}" ToolTip="Delete" Content="û" Command="{Binding DeleteRule}" CommandParameter="{Binding ElementName=HealerHealItemRulesDatagrid, Path=SelectedItem}"/>
                    </StackPanel>
                </Grid>
            </controls:Flyout>
            <!--Targeting Flyout-->
            <controls:Flyout DataContext="{StaticResource TargetingViewModel}"  MinWidth="250" Position="Right" Header="Edit Targeting">
                <controls:Flyout.IsOpen>
                    <MultiBinding Converter="{StaticResource FlyoutMultiBindingConveter}" ConverterParameter="2">
                        <Binding ElementName="MainTabControl" Path="SelectedIndex"/>
                        <Binding ElementName="EditTargetingToggleButton" Path="IsChecked"/>
                    </MultiBinding>
                 </controls:Flyout.IsOpen>
                <Grid Margin="5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="100"/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" Text="Name" />
                            <ComboBox SelectedValue="{Binding CurrentSetting.TargetMonster}" Style="{StaticResource FlyoutCombobox}" ItemsSource="{Binding Monsters}" DisplayMemberPath="Name" Grid.Row="0" Grid.Column="1" IsEditable="True"/>
                            
                            <TextBlock Grid.Row="1" Grid.Column="0" Text="Stance" />
                            <ComboBox SelectedValue="{Binding CurrentSetting.Stance, Converter={StaticResource EnumToStringConverter}}" Grid.Row="1" Grid.Column="1" Style="{StaticResource FlyoutCombobox}" ItemsSource="{Binding Source={StaticResource TargetingStances}, Converter={StaticResource EnumToStringConverter}}"/>
                           
                            <TextBlock Visibility="{Binding CurrentSetting.Stance, Converter={StaticResource VisibilityConverter}}" Grid.Row="2" Grid.Column="0" Text="Distance"/>
                            <controls:NumericUpDown Visibility="{Binding CurrentSetting.Stance, Converter={StaticResource VisibilityConverter}}" Value="{Binding CurrentSetting.KeepAwayDistance}"  Style="{StaticResource FlyoutNumericUpDown}" Grid.Row="2" Grid.Column="1" Minimum="0" Maximum="7"/>
                            <TextBlock  Grid.Row="3" Grid.Column="0" Text="Danger"/>
                            <controls:NumericUpDown  Value="{Binding CurrentSetting.Danger}" Style="{StaticResource FlyoutNumericUpDown}" Grid.Row="3" Grid.Column="1"  Minimum="0" Maximum="100"/>
                            <TextBlock Grid.Row="4" Grid.Column="0" Text="Attack Mode"/>
                            <ComboBox SelectedValue="{Binding CurrentSetting.AttackMode, Converter={StaticResource EnumToStringConverter}}" Style="{StaticResource FlyoutCombobox}" ItemsSource="{Binding Source={StaticResource AttackMode}, Converter={StaticResource EnumToStringConverter}}"  Grid.Row="4" Grid.Column="1"/>
                            <TextBlock Grid.Row="5" Grid.Column="0" Text="Spells" />
                            <ComboBox Name="TargetingCurrentSpells" Margin="30,5,40,5" Grid.Row="5" Grid.Column="1" IsReadOnly="True" ItemsSource="{Binding CurrentSetting.Spells}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <Grid Width="160">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="30"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Grid.Column="0" Text="{Binding Name}"/>
                                            <Button HorizontalAlignment="Right" Grid.Column="1" Command="{Binding CurrentSetting.RemoveSpell, Source={StaticResource TargetingViewModel}}"  Content="X" CommandParameter="{Binding Mode=OneWay}"/>
                                        </Grid>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                            <ToggleButton Margin="5" Grid.Row="5" Grid.Column="1" HorizontalAlignment="Right" Name="EditTargetingSpells" Content="..."/>
                            <ComboBox Margin="5,5,50,5"  Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding ElementName=EditTargetingSpells, Path=IsChecked, Converter={StaticResource VisibilityConverter}}" HorizontalAlignment="Stretch" SelectedValue="{Binding CurrentSetting.CurrentSpell}" ItemsSource="{Binding Spells}" DisplayMemberPath="Name"/>
                            <Button Margin="5" Grid.Row="6" Grid.Column="1"  Visibility="{Binding ElementName=EditTargetingSpells, Path=IsChecked, Converter={StaticResource VisibilityConverter}}" HorizontalAlignment="Right" Content="Add" Command="{Binding CurrentSetting.AddSpell}"/>
                            <CheckBox Margin="5" Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" IsChecked="{Binding CurrentSetting.OnlyIfTrapped}" Content="Only if trapped"/>
                            <StackPanel Grid.Row="8" Margin="0,30,0,0" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Center" Orientation="Horizontal">
                                <Button Style="{StaticResource RoundButtons}"  Content="{Binding AddButtonText}" ToolTip="{Binding AddButtonTooltip}" Command="{Binding AddRule}"/>
                                <Button Style="{StaticResource RoundButtons}"  Content="û" Command="{Binding RemoveRule}" CommandParameter="{Binding ElementName=TargetingSettingDataGrid, Path=SelectedItem}"/>
                             </StackPanel>
                        </Grid> 
            </controls:Flyout>
        </controls:FlyoutsControl>
    </controls:MetroWindow.Flyouts>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <ToggleButton Style="{StaticResource BurgerMainButton}" IsChecked="{Binding ActiveMainMenu}" Grid.Column="0" Name="MainManuToggle" Content="≡" Width="30" HorizontalAlignment="Left" VerticalAlignment="Top"/>

        <!--Main TabControl-->
        <TabControl Grid.Column="0" Name="MainTabControl" SelectedIndex="{Binding CurrentPage}">
            <!--Healer Tab-->
            <TabItem Name="HealerTab" TabIndex="0" DataContext="{StaticResource HealerViewModel}" >
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Row="0" Text="Healer" Style="{StaticResource HeaderText}"/>
                    <CheckBox Style="{StaticResource EnabledCheckBox}" Grid.Column="0" Grid.Row="1" IsChecked="{Binding HealerEnabled}" Content="{Binding HealerEnabled, Converter={StaticResource CheckboxContentConverter}}"/>
                    <ToggleButton Style="{StaticResource EditToggleButton}" Name="EditHealerToggleButton" Content="Edit Rules" Grid.Column="0" Grid.Row="1"/>
                    
                    <controls:MetroAnimatedTabControl Grid.Row="2" Name="HealerRulesTabControl" SelectedIndex="{Binding CurrentHealerTab}">
                        <TabItem Header="Spell" controls:ControlsHelper.HeaderFontSize="15" controls:ControlsHelper.HeaderFontWeight="Bold">
                            <DataGrid IsReadOnly="True" CanUserDeleteRows="False" SelectionMode="Single" x:Name="HealerSpellRulesDatagrid" Margin="5"  ItemsSource="{Binding SpellHealerRulesViewSource.View}" AutoGenerateColumns="False">
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn SortDirection="Descending" Header="Priority" CellTemplate="{StaticResource HealPriorityDataTemplate}" />
                                    <DataGridCheckBoxColumn IsReadOnly="False" Header="Enabled" Binding="{Binding Enabled}"/>
                                    <DataGridTemplateColumn Header="Condition" CellTemplate="{StaticResource HealRuleRangeDataTemplate}"/>
                                    <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                                    <DataGridTemplateColumn Header="Spell" CellTemplate="{StaticResource HealRuleSpellNameDataTemplate}"/>
                                </DataGrid.Columns>
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseDoubleClick">
                                        <i:InvokeCommandAction Command="{Binding EditRule}" CommandParameter="{Binding ElementName=HealerSpellRulesDatagrid, Path=SelectedItem}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </DataGrid>
                        </TabItem>
                        <TabItem Header="Item" controls:ControlsHelper.HeaderFontSize="15" controls:ControlsHelper.HeaderFontWeight="Bold" >
                            <DataGrid IsReadOnly="True" CanUserDeleteRows="False" SelectionMode="Single" x:Name="HealerHealItemRulesDatagrid" Margin="5"  ItemsSource="{Binding ItemHealerRulesViewSource.View}" AutoGenerateColumns="False">
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn Header="Priority" CellTemplate="{StaticResource HealPriorityDataTemplate}"/>
                                    <DataGridCheckBoxColumn IsReadOnly="False" Header="Enabled" Binding="{Binding Enabled}"/>
                                    <DataGridTemplateColumn Header="Condition" CellTemplate="{StaticResource HealRuleRangeDataTemplate}"/>
                                    <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                                    <DataGridTemplateColumn Header="Item" CellTemplate="{StaticResource HealRuleItemNameDataTemplate}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </TabItem>
                    </controls:MetroAnimatedTabControl>
                    
                </Grid>
            </TabItem>
            <!--Cavebot Tab-->
            <TabItem DataContext="{StaticResource CavebotViewModel}" Name="CavebotTab" TabIndex="1">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Row="0" Text="Cavebot" Style="{StaticResource HeaderText}"/>
                    <CheckBox Style="{StaticResource EnabledCheckBox}" Grid.Row="1" Content="{Binding CavebotEnabled, Converter={StaticResource CheckboxContentConverter}}" IsChecked="{Binding CavebotEnabled}" />
                    <ToggleButton Style="{StaticResource EditToggleButton}" Name="EditWaypointsToggleButton" Content="Edit Waypoints" Grid.Row="1"/>
                    <DataGrid CanUserDeleteRows="False" SelectionMode="Single" SelectedItem="{Binding CurrentWaypoint}" HorizontalScrollBarVisibility="Hidden" AutoGenerateColumns="False" Name="WaypointDataGrid" Margin="5" Grid.Row="2" ItemsSource="{Binding WaypointList,Mode=TwoWay}" >
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding Id}" Header="Id" IsReadOnly="True"/>
                            <DataGridTemplateColumn Header="Type" CellTemplate="{StaticResource WaypointTypeDataTemplate}" CellEditingTemplate="{StaticResource WaypointTypeEditingDataTemplate}"/>
                            <DataGridTextColumn Binding="{Binding Label}" Header="Label"/>
                            <DataGridTemplateColumn Header="Location" CellTemplate="{StaticResource WaypoinLocationDataTemplate}" CellEditingTemplate="{StaticResource WaypoinLocationEditingDataTemplate}"/>
                            <DataGridTemplateColumn Header="Range" CellTemplate="{StaticResource WaypointRangeDataTemplate}" CellEditingTemplate="{StaticResource WaypointRangeEditingDataTemplate}"/>
                            <DataGridTextColumn Header="Action" Binding="{Binding Action, Converter={StaticResource RemoveNewLineConverter}}" IsReadOnly="True" Width="*"/>
                        </DataGrid.Columns>

                        <DataGrid.InputBindings>
                            <MouseBinding Gesture="LeftDoubleClick" Command="{Binding EditWaypointAction}" CommandParameter="{Binding ElementName=WaypointDataGrid, Path=SelectedItem}" />
                        </DataGrid.InputBindings>
                    </DataGrid>

                </Grid>
            </TabItem>
            <!--Targeting Tab-->
            <TabItem Name="TargetingTab" TabIndex="2" DataContext="{StaticResource TargetingViewModel}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <TextBlock Text="Targeting" Grid.Row="0" Style="{StaticResource HeaderText}"/>
                    <CheckBox Grid.Row="1" Grid.Column="0" Style="{StaticResource EnabledCheckBox}"  IsChecked="{Binding TargetingEnabled}" Content="{Binding TargetingEnabled, Converter={StaticResource CheckboxContentConverter}}"/>
                    <ToggleButton IsChecked="{Binding EditingRule}" Name="EditTargetingToggleButton" Style="{StaticResource EditToggleButton}" Content="Edit Targeting" Grid.Column="1"  Grid.Row="1"/>
                    <DataGrid IsReadOnly="True" ItemsSource="{Binding Settings}" Name="TargetingSettingDataGrid" Margin="10,5,5,5" Grid.Row="2" Grid.Column="0" AutoGenerateColumns="False">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name" Binding="{Binding TargetMonster.Name}"/>
                            <DataGridTextColumn Header="Spells" Binding="{Binding Spells.Count}" />
                        </DataGrid.Columns>
                        <DataGrid.InputBindings>
                            <MouseBinding Gesture="LeftDoubleClick" Command="{Binding EditRule}" CommandParameter="{Binding ElementName=TargetingSettingDataGrid, Path=SelectedItem}" />
                        </DataGrid.InputBindings>
                    </DataGrid>
                        <Grid Width="200" Grid.Column="1" Grid.Row="2" Margin="10,5,0,0" >
                        <Grid.RowDefinitions>
                            <RowDefinition  Height="Auto"/>
                            <RowDefinition  Height="Auto"/>
                            <RowDefinition  Height="Auto"/>
                            <RowDefinition  Height="Auto"/>
                            <RowDefinition  Height="Auto"/>
                            <RowDefinition  Height="Auto"/>
                            <RowDefinition  Height="Auto"/>
                            <RowDefinition  Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Margin="-10,0,0,10" Style="{StaticResource HeaderTextBlock}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Text="Attack Priority"/>
                        <TextBlock Text="Proximity" Grid.Row="1" Grid.Column="0"/>
                        <Slider Value="{Binding Priorities.Proximity}" VerticalAlignment="Center" Grid.Row="1" Grid.Column="1"/>
                        <TextBlock Text="Health" Grid.Row="2" Grid.Column="0"/>
                        <Slider Value="{Binding Priorities.Health}" VerticalAlignment="Center" Grid.Row="2" Grid.Column="1"/>
                        <TextBlock Text="Danger" Grid.Row="3" Grid.Column="0"/>
                        <Slider Value="{Binding Priorities.Danger}" VerticalAlignment="Center" Grid.Row="3" Grid.Column="1"/>

                        <TextBlock Style="{StaticResource HeaderTextBlock}" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Text="Pathfinding Options"/>
                        <StackPanel Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2">
                            <CheckBox Width="0" Height="0"/>
                            <!--Just to fix the highlight bug-->
                            <CheckBox IsChecked="{Binding Priorities.TargetMustBeReachable}" Content="Target Must Be Reachable"/>
                            <CheckBox IsChecked="{Binding Priorities.TargetMustBeShootable}" Content="Target Must Be Shootable"/>
                        </StackPanel>

                        <TextBlock Style="{StaticResource HeaderTextBlock}" Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Text="Others"/>
                        <StackPanel  Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2">
                            <CheckBox IsChecked="{Binding Priorities.NonPvpMode}" Content="Non-Pvp Mode"/>
                            <CheckBox IsChecked="{Binding Priorities.AntiKs}" Content="Anti-Ks"/>
                            <CheckBox IsChecked="{Binding Priorities.SyncSpellsWithAttacks}" Content="Sync Spells With Attacks"/>
                        </StackPanel>
                    </Grid>
                </Grid>
            </TabItem>
            <!--Looting Tab-->
            <TabItem Name="LootingTab" TabIndex="3">
                <Grid>
                    <TextBlock Text="Looting" Style="{StaticResource HeaderText}"/>
                </Grid>
            </TabItem>
            <!--Peristent Tab-->
            <TabItem Name="PesistentTab" TabIndex="4">
                <Grid>
                    <TextBlock Text="Persistent" Style="{StaticResource HeaderText}"/>
                </Grid>
            </TabItem>
            <!--Hotkey Tab-->
            <TabItem Name="HotkeyTab" TabIndex="5">
                <Grid>
                    <TextBlock Text="Hotkey" Style="{StaticResource HeaderText}"/>
                </Grid>
            </TabItem>
            <!--Application Settings Tab-->
            <TabItem Name="ApplicationSettingsTab" TabIndex="5" DataContext="{StaticResource AppConfigurationViewModel}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" Grid.ColumnSpan="3" Text="Application Settings" Style="{StaticResource HeaderText}"/>
                    <TextBlock Grid.Column="0" Width="70" HorizontalAlignment="Left" Grid.Row="1" Text="Color Accent"/>
                    <ComboBox ItemsSource="{Binding Source={StaticResource ThemeAccents}}" SelectedItem="{Binding ThemeAccent}" Grid.Column="1" Grid.Row="1"/>
                    <TextBlock Grid.Column="0" Width="70" HorizontalAlignment="Left" Grid.Row="2" Text="Theme Base"/>
                    <controls:ToggleSwitch IsChecked="{Binding BaseTheme, Converter={StaticResource BaseThemeConverter}}" FlowDirection="RightToLeft" OnLabel="Dark" OffLabel="Light" Grid.Column="1" Grid.Row="2"/>
                </Grid>
            </TabItem>
        </TabControl>

       

    </Grid>

</controls:MetroWindow>

